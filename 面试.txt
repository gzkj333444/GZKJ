Java三大特性：
封装
1. 封装就是将类的信息隐藏在类内部，不允许外部程序直接访问，而是通过该类的方法实现对隐藏信息的操作和访问。

2. 封装是怎么实现的呢？

   a. 需要修改属性的访问控制符（修改为private）；

   b. 创建getter/setter方法（用于属性的读写）；

   c. 在getter/setter方法中加入属性控制语句（用于判断属性值的合法性）;
public class Student{
 private float score;
public void setScore(float score){
 this.score = score;
   }
  public float getScore(){
      return score;
   }
}


-----------------------------------------------------------------------------------------
继承
继承是类与类的一种关系，比较像集合中的从属于关系。比如说，狗属于动物。就可以看成狗类继承了动物类，那么狗类就是动物类的子类（派生类），动物类就是狗类的父类（基类）。在Java中是单继承的，也就是说一个子类只有一个父类。

父类：动物类
public class Animal{
public int age;
public String name;
 public void eat(){
   System.out.println("动物具有吃东西的本领！");
    }
 }
//子类：狗类
 public class Dog extends Animal {
  
}
---------------------------------------------------------------
多态
多态指的是对象的多种形态。多态有两种：引用多态和方法多态。继承是多态的实现基础。

1.引用多态

父类的引用可以指向本类的对象；父类的引用可以指向子类的对象。

 public class Animal{
   public int age;
      public String name;
      public void eat(){
          System.out.println("动物具有吃东西的本领！");
      }
  }
  //子类：狗类
 public class Dog extends Animal {
     
 }
 //测试类
 public class Test{
     public static void main(String[] args) {
     //父类的引用可以指向本类的对象
     Animal ani1 = new Animal();
    //父类的引用可以指向子类的对象
     Animal ani2 = new Dog();    
     } 
 }
2. 方法多态

创建父类对象时，调用的方法为父类方法；

创建子类对象时，调用的方法是子类重写的方法或继承自父类的方法；



//父类：动物类
public class Animal{
public int age;
public String name;
public void eat(){
         System.out.println("动物具有吃东西的本领！");
     }
 }
 //子类：狗类
 public class Dog extends Animal {
     public void eat(){
        System.out.println("狗是吃肉的。")；
     }
 }
//测试类
 public class Test{
     public static void main(String[] args) {
     //父类的引用可以指向本类的对象
     Animal ani1 = new Animal();
     //父类的引用可以指向子类的对象
     Animal ani2 = new Dog();
     //输出动物具有吃的本领
     ani1.eat();    
    //输出狗是吃肉的
     ani2.eat();
     } 
 }
-----------------------------------------------------------
继承是什么关键字。

继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 java.lang 包中，所以不需要 import ）祖先类。

-------------------------------------------------------------------
实现是什么关键字。
implements 

什么是接口。
接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。

接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。

除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。
-------------------------------------------------------------------------------
接口与抽象类的区别。

相同点

（1）都不能被实例化 （2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。

不同点

（1）接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。

（2）实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。

（3）接口强调特定功能的实现，而抽象类强调所属关系。

（4）接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。
-----------------------------------------------------------------------------------------------
父类与子类的关系。
父类】和【子类】，顾名思义，就是爸爸和儿子；但是有区别，儿子可以【继承】（extends）父亲的“遗产”，并且可以【引用】，【重写】（override），但是，还有区别，在【继承】，【抽象】（abstract）和【接口】（interface）中，儿子可以继承父亲的东西，但是必须要继承引用才可以，而且，父类不可以使用子类的东西，父亲不可以使用子类的方法和类，就是父亲只可以定义，不能够使用，比如，父亲可以帮你娶媳妇，但是不能够帮你使用，使用权必须是你的，否则就是非法的；（话糙理不糙，一本正经脸.jpg）

        【父类】：定义子类们公共的或者单独可以继承的【属性】和【方法】，这属性和方法是一对冤家，属性是静，方法是动，属性是名词，不用操作，拿来就赋予；方法是动词，必须操作；        
-----------------------------------------------------------------------------------------------
你说一下构造方法（函数）。
构造函数是一种特殊的函数。其主要功能是用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。构造函数与类名相同，可重载多个不同的构造函数。在JAVA语言中，构造函数与C++语言中的构造函数相同，JAVA语言中普遍称之为构造方法。
-----------------------------------------------------------------------------------------
前端是怎么发信息到后端的。
JQuery中的ajax提交（常用）
--------------------------------------------------
ajax会吗。
一天能写多少行代码：200行左右吧。
----------------------------------------------------------
数据库：增删改查的SQL文，
1.使用insert插入单行数据：

         语法：insert [into] <表名> [列名] values <列值>

　　 例：insert into Strdents (姓名,性别,出生日期) values ('王伟华','男','1983/6/15')

　　 注意：如果省略表名，将依次插入所有列

1.使用delete删除数据某些数据

    语法：delete from <表名> [where <删除条件>]　　  

    例：delete from a where name='王伟华'（删除表a中列值为王伟华的行）　 

        注意：删除整行不是删除单个字段，所以在delete后面不能出现字段名


 1. 语法：update <表名> set <列名=更新值> [where <更新条件>]

　　 例：update addressList set 年龄=18 where 姓名='王伟华'

　　 注意：set后面可以紧随多个数据列的更新值（非数字要引号）；where子句是可选的（非数字要引号），用来限制条件，如果不选则整个表的所有行都被更新



四、查

1.普通查询

    语法：select <列名> from <表名> [where <查询条件表达试>] [order by <排序的列  

          名>[asc或desc]]

　　　1).查询所有数据行和列

　　　　例：select * from a

　　　　说明：查询a表中所有行和https://www.youtube.com/watch?v=xBzqFXoHlrw

　　　2).查询部分行列--条件查询

　　　　例：select i,j,k   from  a   where f=5

　　　　说明：查询表a中f=5的所有行，并显示i,j,k３列

　　　3).在查询中使用ＡＳ更改列名

　　　　例：select name as 姓名　from a where  gender='男'

　　　　说明：查询a表中性别为男的所有行，显示name列，并将name列改名为（姓名）显示

　　　4).查询空行

　　　　例：select name from a where email is null

　　　　说明：查询表a中email为空的所有行，并显示name列；SQL语句中用is null或者is not null

                  来判断是否为空行

　　　5).在查询中使用常量

　　　　例：select name '北京' as 地址 from　a

　　　　说明：查询表a，显示name列，并添加地址列，其列值都为'北京'

　　　6).查询返回限制行数(关键字：top )

　　　　例１：select top 6 name from a

　　　　说明：查询表a，显示列name的前６行，top为关键字（oracle 中没有top关键字

             用rownum替代）

                          select   *   from   a where   rownum<6  

　　　7).查询排序（关键字：order by , asc , desc）

　　　　例：select name

　　　　　　from a

　　　　　　where grade>=60

　　　　　　order by desc

　　　　说明：查询表中成绩大于等于60的所有行，并按降序显示name列；默认为ＡＳＣ升序

２.模糊查询

　　　1).使用like进行模糊查询

　　　　注意：like运算副只用语字符串，

　　　　例：select * from a where name like '赵%'

　　　　说明：查询显示表a中，name字段第一个字为赵的记录

　　　2).使用between在某个范围内进行查询

　　　　例：select * from a where age between 18 and 20

　　　　说明：查询显示表a中年龄在18到20之间的记录

　　  3).使用in在列举值内进行查询(in后是多个的数据)

        例：select name from a where address in ('北京','上海','唐山')

　　　　说明：查询表a中address值为北京或者上海或者唐山的记录，显示name字段

３.分组查询

　　　1).使用group by进行分组查询

　　　　例：select studentID as 学员编号, AVG(score) as 平均成绩  (注释:这里的score是列名)

　　　　　　from score (注释:这里的score是表名)

　　　　　　group by studentID

           2).使用having子句进行分组筛选

　　　　例：select studentID as 学员编号, AVG　　　　

from score

　　　　　　group by studentID

　　　　　　having count(score)>1

　　　　说明：接上面例子，显示分组后count(score)>1的行，由于where只能在没有分组

       时使用，分组后只能使用having来限制条件，

４.多表联接查询

　　　1).内联接

　　　　①在where子句中指定联接条件

　　　　例：select a.name,b.mark

　　　　　　from a,b

　　　　　　where a.name=b.name

　　　　说明：查询表a和表b中name字段相等的记录，并显示表a中的name字段和表b中的

            mark字段

—————————————————————————————————————————————————————————————


用的哪家数据库：mysql。

你知道数据库的“事务”（トランザクション）吗。（不知道就说不是很清楚）

用的什么框架：myBatis。


式样书部分：
详细式样书写过吗：写过。（基本式样书没写过）
—————————————————————————————————————————————————————————————
测试式样书写过吗：写过。
—————————————————————————————————————————————————————————————

写详细设计书时要注意什么：要基于基本设计书。
—————————————————————————————————————————————————————————————

写测试式样书时要注意什么：要基于详细设计书。
—————————————————————————————————————————————————————————————


测试部分：
一天能写多少个case：20个左右。
—————————————————————————————————————————————————————————————

用的什么工具：junit

　JUnit是一个Java语言的单元测试框架。它由Kent Beck和Erich Gamma建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中最为成功的一个JUnit有它自己的JUnit扩展生态圈。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。

　　注意：Junit 测试也是程序员测试，即所谓的白盒测试，它需要程序员知道被测试的代码如何完成功能，以及完成什么样的功能

 —————————————————————————————————————————————————————————————


测试式样样书写过吗：写过。

—————————————————————————————————————————————————————————————

项目平常是怎么传达和分配任务的：用Redmine和邮件。（redmine是一个项目管理工具，项目进度和任务分配等都在这上面）
项目管理用什么软件：git。